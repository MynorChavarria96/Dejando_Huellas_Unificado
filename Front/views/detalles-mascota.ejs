<!DOCTYPE html>
<html lang="es">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Detalles de la Mascota</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css">
    <link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />
    <style>
        form input[type=date] {
            width: 100% !important;
        }

        form input[type=number] {
            height: 46px !important;
            padding: 10px !important;
        }

        .form-select {
            height: 46px !important;
        }

        .previewImage {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

        .modal-content {
            max-width: 1220px !important;
        }

        .modal-content img {
            max-height: 150% !important;
        }

        .img-fluid {
            border: 1px solid black;
        }


        .mascota-foto img {
            position: relative;
            width: 80%;
            height: 400px;
            display: block;
            margin: 0 auto;
            border-radius: 10px;
            cursor: pointer;
            object-fit: cover;
            /* Ajusta la imagen para que cubra el espacio sin deformarse */
        }

        .map {
            height: 300px;
            width: 100%;
            margin-top: 10px;
        }

        .modal-map {
            height: 300px;
            width: 100%;
            margin-top: 10px;
        }

        .leaflet-popup-close-button {
            display: none;
            /* Oculta el botón de cerrar del popup */
        }

        .mascota-foto {
            position: relative;
        }

        #preview {
            cursor: zoom-in;
            /* Indica que se puede hacer zoom */
        }

        .zoomed-image {
            position: absolute;
            top: 0;
            left: 100%;
            width: 500px;
            height: 400px;
            border: 1px solid #ccc;
            background-repeat: no-repeat;
            background-size: 200%;
            display: none;
            z-index: 100;

        }
        .btn-custom{
            background-color: #487B68 !important;
        }
        .btn-custom:hover{
            background-color: #315347 !important;
        }
       

        #map {
            height: 400px;
            width: 100%;
        }

        .modal-lg-custom {
            max-width: 80%;
        }

        @media (max-width: 768px) {
            .modal-lg-custom {
                max-width: 100%;
            }

            .mascota-foto img {
                width: 100%;
                /* Hace que la imagen ocupe todo el ancho del contenedor en móviles */
                height: auto;
                /* Mantiene la proporción de la imagen */
                padding: 0;
                /* Elimina cualquier padding */
                margin: 0;
                /* Elimina cualquier margen */
                border-radius: 0;
                /* Opcional: elimina el borde redondeado en móviles */
            }

            .mascota-foto {
                padding: 0;
                /* Elimina el padding del contenedor de la imagen */
                margin: 0;
                /* Elimina el margen del contenedor de la imagen */
            }


            #preview {
                cursor: default;
                ;
                /* Desactiva la interactividad (zoom) en móviles */
            }

            #zoomedImage {
                display: none;
                /* Oculta la imagen ampliada en dispositivos móviles */
            }
            #estado-reporte{
                margin-left: 50px;
            }

        }
    </style>
</head>

<body>
    <div class="container-fluid px-0 px-md-5">
        <div class="card">
           
            <div class="d-flex justify-content-between m-2">
                <a href="/mias-mascotas" class="btn btn-secondary btn-custom">
                    <i class="fas fa-arrow-left"></i> Volver
                </a>
                <a id="btn-vacunas" class="btn btn-secondary btn-custom">
                    <i class="fa-solid fa-syringe"></i> Vacunas
                </a>
                
            </div>
            
            <h1 class="text-center mb-4">Detalles de la Mascota</h1>
            <div class="card-body px-md-5 px-lg-6">
                <div id="mascotaDetalles" class="row">
                    <!-- Los detalles de la mascota se cargarán aquí -->
                </div>
                <div class="col md-12 text-center mt-2">
                    <h2>Lugar de residencia</h2>
                </div>

                <div class="col md-12">
                    <div id="map" class="map"></div>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal -->
    <div class="modal fade" id="registroModal" tabindex="-1" aria-labelledby="registroModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg modal-lg-custom">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="registroModalLabel">Editar Mascota</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="regForm" method="post">
                        <h4>Datos de la Mascota</h4>
                        <div class="row mb-3">
                            <div class="col-md-7">
                                <label for="nombre_mascota" class="form-label">Nombre</label>
                                <input type="text" class="form-control" maxlength="50" id="nombre_mascota"
                                    name="nombre_mascota" required>
                            </div>
                            <div class="col-md-1"></div>
                            <div class="col-md-4">
                                <label for="raza" class="form-label">Raza</label>
                                <input type="text" class="form-control" id="raza" name="raza">
                            </div>
                        </div>
                        <div class="row mb-3">
                            <div class="col-md-3">
                                <label for="fecha_nacimiento" class="form-label">Fecha de Nacimiento</label>
                                <input type="date" class="form-control" id="fecha_nacimiento" name="fecha_nacimiento"
                                    required>
                            </div>
                            <div class="col-md-1"></div>
                            <div class="col-md-3">
                                <label for="peso" class="form-label">Peso en libras</label>
                                <input type="number" min="0.01" step="0.10" max="99999.99" class="form-control"
                                    id="peso" name="peso" required>
                            </div>
                            <div class="col-md-1"></div>
                            <div class="col-md-4">
                                <label for="color" class="form-label">Color</label>
                                <input type="text" class="form-control" id="color" name="color">
                            </div>
                        </div>
                        <div class="row md-3">
                            <div class="col-md-4">
                                <div class="form-check form-switch">
                                    <label for="flexSwitchCheckDefault" class="form-label">¿Tiene alguna enfermedad
                                        crónica?</label>
                                    <div class="form-check">
                                        <input class="form-check-input" type="radio" name="exampleRadios"
                                            id="exampleRadios2" value="no" checked>
                                        <label class="form-check-label" for="exampleRadios2">NO</label>
                                    </div>
                                    <div class="form-check">
                                        <input class="form-check-input" type="radio" name="exampleRadios"
                                            id="exampleRadios1" value="si">
                                        <label class="form-check-label" for="exampleRadios1">SI</label>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-8">
                                <label for="enfermedad_cronica" class="form-label">Describa la enfermedad</label>
                                <input type="text" class="form-control" id="enfermedad_cronica" maxlength="254"
                                    name="enfermedad_cronica">
                            </div>
                        </div>
                        <div class="row mb-3">
                            <div class="col-md-7">
                                <div class="row mb-3">
                                    <div class="col-md-5">
                                        <label for="especie" class="form-label">Especie</label>
                                        <select class="form-select" id="especie" name="especie_id" required>
                                            <option value="" selected disabled>Elija una especie</option>
                                        </select>
                                    </div>
                                    <div class="col-md-2"></div>
                                    <div class="col-md-5">
                                        <label for="genero" class="form-label">Género</label>
                                        <select class="form-select" id="genero" name="genero">
                                            <option value="" selected disabled>Elija un género</option>
                                        </select>
                                    </div>
                                </div>
                                <div class="row mb-3">
                                    <div class="col-md-12">
                                        <label for="formFile" class="form-label">Foto</label>
                                        <input class="form-control" type="file" id="formFile" name="foto"
                                            accept="image/*" onchange="uploadImage(event)">
                                        <input type="hidden" id="foto_ruta" name="foto_ruta">
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-5 px-md-5 px-lg-6">
                                <img id="previewImage" src="/public/images/default.jpg"
                                    class="img-fluid rounded mx-auto d-block" alt="...">
                            </div>
                        </div>
                        <div class="row">
                            <h3><strong> Dirección de vivienda</strong></h3>
                            <p>Esta información es indispensable para ubicar mas fácil la direccion de residencia de la
                                mascota en
                                caso de que se pierda.</p>
                        </div>
                        <!-- Contenedor para mostrar la información de ubicación -->
                        <div class="row mt-3" id="locationInfo">

                            <div class="col-md-6">
                                <label for="locationSearch">Buscar lugar:</label>
                                <input type="text" id="locationSearch" class="form-control"
                                    placeholder="Ingresa el nombre del lugar">
                                <button type="button" onclick="searchLocation()"
                                    class="btn btn-primary mt-2 search">Buscar</button>
                                <p>Para seleccionar tu ubicación, toca dos veces en el mapa.</p>
                            </div>
                            <div class="col-md-12">
                                <div id="modal-map" class="modal-map"></div>
                            </div>
                        </div>
                        <div class="row justify-content-center">
                            <div class="col-12 col-md-2">
                                <button type="button" id="btn-actualizar"
                                    class="btn btn-primary w-100">Actualizar</button>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal ver Foto -->
    <div class="modal fade" id="imagenModal" tabindex="-1" aria-labelledby="imagenModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered  modal-lg-custom">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="imagenModalLabel"></h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <img src="" alt="" id="imagenAmpliada" class="img-fluid" style="width: 150%; height: 150%;">
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/5.3.0/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js"></script>
    <script src="//cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://cdn.jsdelivr.net/npm/qr-code-styling@1.5.0/lib/qr-code-styling.js"></script>
    <script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>

    <script>



        document.addEventListener('DOMContentLoaded', () => {
            const mascotaDetalles = document.getElementById('mascotaDetalles');
            const radioSi = document.getElementById('exampleRadios1');
            const radioNo = document.getElementById('exampleRadios2');
            const enfermedadInput = document.getElementById('enfermedad_cronica');
            const btnActualizar = document.getElementById('btn-actualizar');
       
            const mascota = JSON.parse(sessionStorage.getItem('mascotaSeleccionada'));
            const btnVacunas = document.getElementById('btn-vacunas');
            
            btnVacunas.addEventListener('click', ()=>{
                window.location.href= `/mias-mascotas/detalles/vacunas/${mascota.mascota_id}`
            })
            
            let modalMap;
            let modalMarker;

            function toggleEnfermedadInput() {
                if (radioSi.checked) {
                    enfermedadInput.disabled = false;
                    enfermedadInput.setAttribute('required', 'required');
                } else {
                    enfermedadInput.disabled = true;
                    enfermedadInput.value = '';
                    enfermedadInput.removeAttribute('required');
                }
            }

            // Ejecutar la función al cargar la página para establecer el estado inicial
            toggleEnfermedadInput();

            // Agregar eventos de cambio a los radio buttons
            radioSi.addEventListener('change', toggleEnfermedadInput);
            radioNo.addEventListener('change', toggleEnfermedadInput);

            // Función para calcular la edad
            function calcularEdad(fechaNacimiento) {
                const hoy = new Date();
                const nacimiento = new Date(fechaNacimiento);
                let edad = hoy.getFullYear() - nacimiento.getFullYear();
                const mes = hoy.getMonth() - nacimiento.getMonth();

                if (mes < 0 || (mes === 0 && hoy.getDate() < nacimiento.getDate())) {
                    edad--;
                }
                if (edad === 1) {
                    return (edad + ' año');
                }
                else {
                    return (edad + ' años');
                }


            }



            // Función para formatear la fecha en formato YYYY-MM-DD
            function formatearFecha(fecha) {
                const fechaObj = new Date(fecha);
                const year = fechaObj.getFullYear();
                const month = ('0' + (fechaObj.getMonth() + 1)).slice(-2);
                const day = ('0' + fechaObj.getDate()).slice(-2);
                return `${year}-${month}-${day}`;
            }

            if (mascota) {

                mascotaDetalles.innerHTML = `
                    <div class="col-md-4 mx-auto d-flex justify-content-center align-items-center mascota-foto">
                    <img src="${mascota.foto}" alt="${mascota.nombre}" class="img-fluid" id="preview" onclick="mostrarImagenAmpliada('${mascota.foto}', '${mascota.nombre}')">
                    <div id="zoomedImage" class="zoomed-image"></div>
                    </div>
                    <div class="col-md-4 d-flex align-items-center">
                        <div class="w-100">
                            <h2 class="fw-bold text-uppercase text-center w-100 mt-2">${mascota.nombre}</h2>
                            <p><strong>Especie:</strong> ${mascota.nombre_especie}</p>
                            <p><strong>Raza:</strong> ${mascota.raza}</p>
                            <p><strong>Género:</strong> ${mascota.nombre_genero}</p>
                            <p><strong>Fecha de Nacimiento:</strong> ${new Date(mascota.fecha_nacimiento).toLocaleDateString()} (${calcularEdad(mascota.fecha_nacimiento)})</p>
                            <p><strong>Color:</strong> ${mascota.color}</p>
                            <p><strong>Peso:</strong> ${mascota.peso} lbs.</p>
                            <p><strong>Enfermedad Crónica:</strong> ${mascota.enfermedad_cronica || 'N/A'}</p>
                            <p id="badge-reporte"  class="text-center" style="display: none;"><span class="badge text-bg-danger text-center">Desparecido</span></p>
                            <p>
                                <button class="btn btn-warning me-2" data-bs-toggle="modal" data-bs-target="#registroModal">Editar</button>
                                <button class="btn btn-danger me-2 " id="btn-eliminar">Eliminar</button>
                                <button class="btn btn-success" id="btn-quitar-reporte" style="display: none;">Quitar reporte</button>
                            </p>
                        </div>
                    </div>
                   <div class="col-md-4 d-flex justify-content-center align-items-center">
                 <div class="row">
                <div class="col-12 d-flex  justify-content-center" id="qrcode-${mascota.identificador_qr}" onclick="window.location.href = '/info/${mascota.identificador_qr}'" style="cursor: pointer;">
                    <!-- Aquí va el código QR -->
                </div>
                <div class="col-12 col-md-8 mt-3 mx-auto d-flex justify-content-center">
                    <button id="downloadQr" class="btn btn-primary btn-custom w-100 w-md-auto">Descargar QR</button>
                </div>
                    </div>
                </div>
                    
                `;
                if (mascota.desaparecido === 1) {
                document.getElementById('badge-reporte').style.display = 'block';
                document.getElementById('btn-quitar-reporte').style.display = 'inline-block';
            }

               
             
            
                // Convertir latitud y longitud a números
                const latitud = parseFloat(mascota.latitud);
                const longitud = parseFloat(mascota.longitud);

                // Inicializar el mapa centrado en las coordenadas de la mascota
                const map = L.map('map').setView([latitud, longitud], 15); // El número 15 es el nivel de zoom


                // Agregar los mosaicos de OpenStreetMap
                L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                    attribution: '© OpenStreetMap contributors'
                }).addTo(map);

                // Agregar un marcador en las coordenadas de la mascota
                const marker = L.marker([latitud, longitud]).addTo(map);

                // Vincular un popup al marcador con el nombre y la descripción del lugar
                marker.bindPopup(`<strong>${mascota.nombre_lugar}</strong><br>${mascota.descripcion_lugar}`).openPopup();

                generaQrConLogo(mascota.identificador_qr, '/public/images/logo2.png');
                // Añadir el evento de click para descargar el QR
                document.getElementById('downloadQr').addEventListener('click', function () {
                    descargarQr(mascota.identificador_qr);
                });
              

                // Agregar el evento click al botón de editar después de generar el contenido
                document.querySelector('.btn-warning').addEventListener('click', () => {
                    // Llenar el formulario con los datos de la mascota
                    document.getElementById('nombre_mascota').value = mascota.nombre;
                    document.getElementById('raza').value = mascota.raza;
                    document.getElementById('fecha_nacimiento').value = formatearFecha(mascota.fecha_nacimiento); // Formatear la fecha antes de asignarla
                    document.getElementById('peso').value = mascota.peso;
                    document.getElementById('color').value = mascota.color;
                    document.getElementById('enfermedad_cronica').value = mascota.enfermedad_cronica;
                    document.getElementById('previewImage').src = mascota.foto;

                    // Convertir latitud y longitud a números
                    const latitud = parseFloat(mascota.latitud);
                    const longitud = parseFloat(mascota.longitud);


                    // Cargar y seleccionar especies y géneros
                    cargarEspecies(mascota.especie_id);
                    cargarGeneros(mascota.genero_id);

                    const modal = new bootstrap.Modal(document.getElementById('registroModal'));
                    modal.show();
                    // Configurar el evento click del botón de búsqueda
                    const searchButton = document.querySelector('.btn-primary.mt-2'); // Asegúrate de que este selector coincida con tu botón de búsqueda
                    if (searchButton) {
                        searchButton.addEventListener('click', searchLocation);
                    }

                    // Configurar el evento 'shown.bs.modal' para inicializar el mapa
                    $('#registroModal').off('shown.bs.modal').on('shown.bs.modal', function () {
                        initializeOrUpdateModalMap(latitud, longitud, mascota.nombre_lugar, mascota.descripcion_lugar);
                    });

                    // Configurar el evento 'hidden.bs.modal' para eliminar el fondo modal residual
                    $('#registroModal').off('hidden.bs.modal').on('hidden.bs.modal', function () {
                        $('.modal-backdrop').remove(); // Elimina cualquier fondo modal que quede
                    });
                });
            } else {
                mascotaDetalles.innerHTML = '<p class="text-danger text-center">No se pudo cargar la información de la mascota.</p>';
            }
            function clickQr(qr_code){
                windows.location.href = `/info/${mascota.identificador_qr}`
            }

          
            // Variables globales para latitud, longitud, nombre y descripción
            let latitude, longitude, placeName, description;

            function initializeOrUpdateModalMap(latitud, longitud, nombre_lugar, descripcion_lugar) {
                if (!modalMap) {
                    // Si el mapa no ha sido creado aún, inicialízalo
                    modalMap = L.map('modal-map').setView([latitud, longitud], 15);

                    // Agregar los mosaicos de OpenStreetMap
                    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                        attribution: '© OpenStreetMap contributors'
                    }).addTo(modalMap);

                    // Escuchar el evento de doble clic en el mapa
                    modalMap.on('dblclick', function (e) {
                        // Guardar la información anterior
                        const previousLatLng = modalMarker ? modalMarker.getLatLng() : null;
                        const previousName = placeName;
                        const previousDescription = description;

                        // Obtener las coordenadas donde se hizo doble clic
                        const coords = e.latlng;

                        // Eliminar el marcador existente si hay uno
                        if (modalMarker) {
                            modalMap.removeLayer(modalMarker);
                        }

                        // Crear un nuevo marcador en las coordenadas de doble clic
                        modalMarker = L.marker([coords.lat, coords.lng]).addTo(modalMap);
                        latitude = coords.lat;
                        longitude = coords.lng;

                        // Solicitar al usuario el nombre y la descripción del lugar
                        const newName = prompt("Ingrese el nombre del lugar:", previousName);
                        const newDescription = prompt("Ingrese la descripción del lugar:", previousDescription);

                        // Verificar si el usuario canceló alguno de los prompts
                        if (newName === null || newDescription === null) {
                            // Si el usuario cancela, restablecer la información anterior
                            if (previousLatLng) {
                                modalMarker.setLatLng(previousLatLng);
                                modalMarker.bindPopup(`<strong>${previousName}</strong><br>${previousDescription}`).openPopup();
                            } else {
                                modalMap.removeLayer(modalMarker); // Si no hay información previa, simplemente remueve el marcador
                                modalMarker = null;
                            }
                        } else {
                            // Actualizar la información y vincular el popup al marcador
                            placeName = newName;
                            description = newDescription;
                            modalMarker.bindPopup(`<strong>${placeName}</strong><br>${description}`).openPopup();
                        }
                    });

                } else {
                    // Si el mapa ya existe, invalida su tamaño y recéntralo
                    modalMap.invalidateSize();
                    modalMap.setView([latitud, longitud], 15);

                    // Si ya existe un marcador, elimínalo para evitar múltiples marcadores
                    if (modalMarker) {
                        modalMap.removeLayer(modalMarker);
                    }

                    // Agregar un marcador en las coordenadas iniciales
                    modalMarker = L.marker([latitud, longitud]).addTo(modalMap);

                    // Vincular un popup al marcador con el nombre y la descripción del lugar
                    modalMarker.bindPopup(`<strong>${nombre_lugar}</strong><br>${descripcion_lugar}`).openPopup();

                    // Actualizar las variables globales
                    latitude = latitud;
                    longitude = longitud;
                    placeName = nombre_lugar;
                    description = descripcion_lugar;


                }
            }
            function searchLocation() {
                const locationName = document.getElementById('locationSearch').value;
                if (locationName) {
                    const url = `https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(locationName)}`;
                    fetch(url)
                        .then(response => response.json())
                        .then(data => {
                            if (data.length > 0) {
                                const { lat, lon } = data[0];

                                // Asegúrate de que modalMap esté inicializado
                                if (modalMap) {
                                    // Centrar el mapa en la nueva ubicación
                                    modalMap.setView([lat, lon], 13);

                                    // Eliminar el marcador existente si hay uno
                                    if (modalMarker) {
                                        modalMap.removeLayer(modalMarker);
                                    }

                                    // Crear un nuevo marcador en la ubicación encontrada
                                    modalMarker = L.marker([lat, lon]).addTo(modalMap);
                                    modalMarker.bindPopup(`<strong>${locationName}</strong>`).openPopup();

                                    // Actualizar las variables globales con la nueva ubicación
                                    latitude = parseFloat(lat);
                                    longitude = parseFloat(lon);
                                    placeName = locationName;
                                    description = ''; // O pide al usuario ingresar una descripción si es necesario
                                } else {
                                    console.error("modalMap no está inicializado.");
                                    alert("El mapa no está inicializado.");
                                }
                            } else {
                                alert("No se encontró la ubicación. Inténtalo de nuevo.");
                            }
                        })
                        .catch(error => {
                            console.error('Error al buscar la ubicación:', error);
                            alert("Ocurrió un error al buscar la ubicación.");
                        });
                } else {
                    alert("Por favor, ingresa el nombre de un lugar para buscar.");
                }
            }

            document.getElementById('preview').addEventListener('mousemove', function (e) {
                var zoomedImage = document.getElementById('zoomedImage');
                zoomedImage.style.display = 'block';

                var rect = e.target.getBoundingClientRect();
                var x = e.clientX - rect.left; // Coordenada X del mouse respecto a la imagen
                var y = e.clientY - rect.top; // Coordenada Y del mouse respecto a la imagen
                var width = e.target.width;
                var height = e.target.height;
                var bgPosX = (x / width) * 100;
                var bgPosY = (y / height) * 100;

                zoomedImage.style.backgroundImage = 'url(' + e.target.src + ')';
                zoomedImage.style.backgroundPosition = bgPosX + '% ' + bgPosY + '%';
            });
            document.getElementById('preview').addEventListener('mouseleave', function () {
                var zoomedImage = document.getElementById('zoomedImage');
                zoomedImage.style.display = 'none';
            });

            function generaQrConLogo(identificador_qr, logoUrl) {
                const qrCode = new QRCodeStyling({
                    width: 300,
                    height: 300,
                    data: `info/${identificador_qr}`,
                    image: logoUrl,  // URL del logo
                    dotsOptions: {
                        color: "#000",   // Color de los puntos del QR
                        type: "rounded"  // Tipo de puntos (puede ser "square", "dots", "rounded", etc.)
                    },
                    cornersSquareOptions: {
                        color: "#000",   // Color de las esquinas del QR
                        type: "extra-rounded"  // Tipo de esquinas ("square", "extra-rounded", etc.)
                    },
                    imageOptions: {
                        crossOrigin: "anonymous",
                        margin: 5// Margen alrededor del logo
                    }
                });

                // Añadir el QR generado al contenedor
                qrCode.append(document.getElementById(`qrcode-${identificador_qr}`));

                // Añadir funcionalidad de descarga al botón
                document.getElementById('downloadQr').addEventListener('click', function () {
                    qrCode.download({ name: `QR-${identificador_qr}`, extension: "png" });
                });
            }



            function descargarQr(identificador_qr) {
                var qrContainerId = `qrcode-${identificador_qr}`;
                var canvas = document.querySelector(`#${qrContainerId} canvas`);


                if (canvas) {
                    var qrDataURL = canvas.toDataURL("image/png");

                    // Crear un enlace temporal y disparar el evento de descarga
                    var link = document.createElement('a');
                    link.href = qrDataURL;
                    link.download = `QR-${identificador_qr}.png`; // Nombre del archivo descargado
                    link.click();
                } else {
                    console.error("El código QR no está disponible para la descarga.");
                }
            }



            btnActualizar.addEventListener('click', async (event) => {
                event.preventDefault();

                const fotoRuta = document.getElementById('previewImage').src;
                let fullPath = document.getElementById('previewImage').src;
                let url = new URL(fullPath);
                let localPath = url.pathname; // Esto te dará la ruta relativa sin el dominio //
                // Crear el objeto formData
                const formData = {
                    nombre: document.getElementById('nombre_mascota').value,
                    especie_id: document.getElementById('especie').value,
                    raza: document.getElementById('raza').value,
                    genero_id: document.getElementById('genero').value,
                    fecha_nacimiento: document.getElementById('fecha_nacimiento').value,
                    color: document.getElementById('color').value,
                    peso: document.getElementById('peso').value,
                    foto: localPath,
                    enfermedad_cronica: document.getElementById('enfermedad_cronica').value,
                    propietario_id: <%= propietarioId %> ,// Usar el propietarioId desde la sesión
                    nombreUbicacion: placeName,
                    latitud: latitude,
                    longitud: longitude,
                    descripcion_adicional: description,
                    ubicacionId: mascota.ubicacion_id
            };

            // Extraer el mascota_id para usarlo en la URL
            const mascota_id = mascota.mascota_id;

            try {
                const response = await fetch(`/mis-mascotas/actualizar/${mascota_id}`, { // Incluye el mascota_id en la URL
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(formData) // Enviar el formData sin el mascota_id
                });

                if (response.ok) {
                    const result = await response.json();
                    toastr.success('Mascota actualizada exitosamente');
                    console.log('Respuesta de la API:', result);

                    // Esperar 3 segundos (3000 ms) antes de redirigir
                    setTimeout(() => {
                        // Cerrar el modal
                        const modalElement = document.getElementById('registroModal');
                        const modal = bootstrap.Modal.getInstance(modalElement);
                        modal.hide();

                        // Limpiar el formulario
                        document.getElementById('regForm').reset();
                        document.getElementById('previewImage').src = '/public/images/default.jpg'; // Restablecer la imagen a la predeterminada

                        // Forzar eliminación del backdrop
                        document.querySelectorAll('.modal-backdrop').forEach(backdrop => backdrop.remove());
                        window.location.href = '/mias-mascotas';
                    }, 3000);

                } else {
                    const errorResult = await response.json();
                    toastr.error('Error al actualizar la mascota: ' + errorResult.message);
                }
            } catch (error) {
                toastr.error('Error de conexión con la API');
            }
        });

        


        const btnEliminar = document.getElementById('btn-eliminar');
       

        btnEliminar.addEventListener('click', async (event) => {
            event.preventDefault();
            const mascota_id = mascota.mascota_id;

            // Mostrar la alerta de confirmación
            Swal.fire({
                title: '¿Estás seguro de eliminar la mascota?',
                text: "No podrás revertir esta acción",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Sí, eliminar',
                cancelButtonText: 'Cancelar'
            }).then(async (result) => {
                if (result.isConfirmed) {
                    try {
                        const response = await fetch(`/mis-mascotas/eliminar/${mascota_id}`, {
                            method: 'PUT',
                            headers: {
                                'Content-Type': 'application/json'
                            }
                        });

                        if (response.ok) {
                            const result = await response.json();
                            Swal.fire(
                                'Eliminada',
                                'La mascota ha sido eliminada.',
                                'success'
                            );

                            // Esperar 2 segundos (2000 ms) antes de redirigir
                            setTimeout(() => {
                                window.location.href = '/mias-mascotas';
                            }, 2000);

                        } else {
                            const errorResult = await response.json();
                            Swal.fire(
                                'Error',
                                'Error al eliminar la mascota: ' + errorResult.message,
                                'error'
                            );
                        }
                    } catch (error) {
                        Swal.fire(
                            'Error',
                            'Error de conexión con la API',
                            'error'
                        );
                    }
                }
            });
        });

        const btnQuitarReporte = document.getElementById('btn-quitar-reporte');

        btnQuitarReporte.addEventListener('click', async (event) => {
            event.preventDefault();
            const mascota_id = mascota.mascota_id;

            // Mostrar la alerta de confirmación
            Swal.fire({
                title: '¿Estás seguro de quitar el reporte?',
                text: "El reporte de desaparcion dejará de estar visible",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Sí, quitar',
                cancelButtonText: 'Cancelar'
            }).then(async (result) => {
                if (result.isConfirmed) {
                    try {
                        const response = await fetch(`/info/eliminarReporte/${mascota_id}`, {
                            method: 'PUT',
                            headers: {
                                'Content-Type': 'application/json'
                            }
                        });

                        if (response.ok) {
                            const result = await response.json();
                            Swal.fire(
                                'Eliminado',
                                'El reporte ha sido eliminado.',
                                'success'
                            );

                            // Esperar 2 segundos (2000 ms) antes de redirigir
                            setTimeout(() => {
                                window.location.href = '/mias-mascotas';
                            }, 2000);

                        } else {
                            const errorResult = await response.json();
                            Swal.fire(
                                'Error',
                                'Error al eliminar el reporte: ' + errorResult.message,
                                'error'
                            );
                        }
                    } catch (error) {
                        Swal.fire(
                            'Error',
                            'Error de conexión con la API',
                            'error'
                        );
                    }
                }
            });
        });



        })

        function mostrarImagenAmpliada(imagenSrc, nombre) {
            // Actualizar el src de la imagen en el modal
            document.getElementById('imagenAmpliada').src = imagenSrc;
            document.getElementById('imagenAmpliada').alt = nombre;

            // Actualizar el título del modal
            document.getElementById('imagenModalLabel').textContent = nombre;

            // Mostrar el modal
            var imagenModal = new bootstrap.Modal(document.getElementById('imagenModal'));
            imagenModal.show();
        }

        function cargarEspecies(especieIdSeleccionada) {
            fetch('/mis-mascotas/especies')
                .then(response => response.json())
                .then(data => {
                    const especieSelect = document.getElementById('especie');
                    especieSelect.innerHTML = '<option value="" selected disabled>Elija una especie</option>';
                    data.forEach(especie => {
                        let option = document.createElement('option');
                        option.value = especie.especie_id;
                        option.textContent = especie.nombre_especie;
                        if (especie.especie_id == especieIdSeleccionada) {
                            option.selected = true;
                        }
                        especieSelect.appendChild(option);
                    });
                })
                .catch(error => console.error('Error al cargar las especies:', error));
        }

        function cargarGeneros(generoIdSeleccionado) {
            fetch('/mis-mascotas/generos')
                .then(response => response.json())
                .then(data => {
                    const generoSelect = document.getElementById('genero');
                    generoSelect.innerHTML = '<option value="" selected disabled>Elija un género</option>';
                    data.forEach(genero => {
                        let option = document.createElement('option');
                        option.value = genero.genero_id;
                        option.textContent = genero.nombre_genero;
                        if (genero.genero_id == generoIdSeleccionado) {
                            option.selected = true;
                        }
                        generoSelect.appendChild(option);
                    });
                })
                .catch(error => console.error('Error al cargar los generos:', error));
        }

        async function uploadImage(event) {
            const fileInput = event.target;
            const formData = new FormData();
            formData.append('foto', fileInput.files[0]);

            try {
                const response = await fetch('/upload', {
                    method: 'POST',
                    body: formData
                });

                if (!response.ok) {
                    toastr.error('Error al subir la imagen');
                    return null;
                }

                const data = await response.json();
                const previewImage = document.getElementById('previewImage');
                previewImage.src = data.filePath;  // Actualiza la imagen de vista previa
                document.getElementById('foto_ruta').value = data.filePath;  // Guarda la ruta en un campo oculto

                return data.filePath;
            } catch (error) {
                console.error('Error al subir la imagen:', error);
                toastr.error('Error al subir la imagen');
                return null;
            }
        }
    </script>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</body>

</html>